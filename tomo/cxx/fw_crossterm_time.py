#!/usr/bin/env python3
import h5py
import numpy as np
import sys

def read_3D_mod_grd_(fnm):
    #index  lon     lat     depth            x y z                           vp vs rho  dvp(1+e) dvs(1+e)
    #212268 30.0000 -5.0000 660.000000001000 4927.0505 2844.6340 -497.7464   10.790000 5.960000 4.371400 0.990000 0.950000
    tmp = np.loadtxt(fnm, comments='#', dtype={ 'names':   ('index', 'lon', 'lat', 'depth', 'x', 'y', 'z', 'vp', 'vs', 'rho', 'dvp', 'dvs' ),
                        'formats': ('i4',    'f4',  'f4',  'f4',    'f4','f4','f4','f4', 'f4', 'f4',  'f4',  'f4' )  }   )
    ###
    vol = dict()
    for row in tmp:
        vol[ row['index'] ] = { 'vp': row['vp'],
                                'vs': row['vs'],
                                'mp': row['dvp'],
                                'ms': row['dvs'] }
    return vol

def run_cc_sens(mod_grd_fnm, cc_fnm, out_fnm):
    mod3d_grdpt = read_3D_mod_grd_(mod_grd_fnm)
    fid = h5py.File(cc_fnm, 'r')
    ##
    fp_out = open(out_fnm, 'w')
    print("#cc_index time_1d_taup time_1d time_3d dt", file=fp_out)
    grp = fid['sensitivity_zip']
    for cc_index, vol in grp.items():
        ### obtain attributes
        attrs = vol.attrs
        ##
        id1, id2 = attrs['id1'][0], attrs['id2'][0]
        phase1, phase2 = attrs['phase1'].decode('UTF-8'), attrs['phase2'].decode('UTF-8')
        tag1  , tag2   = attrs['tag1'].decode('UTF-8'), attrs['tag2'].decode('UTF-8')
        ##
        time_1d_taup = attrs['time1d_taup'][0]
        time_1d = attrs['time1d'][0]
        ### obtain 1D sens
        sens_icol_p, sens_value_p = vol['index_P'][:], vol['value_P'][:]
        sens_icol_s, sens_value_s = vol['index_S'][:], vol['value_S'][:]
        ### computation
        for idx, icol in enumerate(sens_icol_p):
            if icol in mod3d_grdpt:
                sens_value_p[idx] *= mod3d_grdpt[icol]['mp']
        for idx, icol in enumerate(sens_icol_s):
            if icol in mod3d_grdpt:
                sens_value_s[idx] *= mod3d_grdpt[icol]['ms']
        correlation_time = np.sum(sens_value_p) + np.sum(sens_value_s)
        dt = correlation_time - time_1d
        ###
        #if dt > 2.0:
        #    print(cc_index, id1, id2, tag1, tag2, time_1d_taup, time_1d, correlation_time, dt)
        print(cc_index, time_1d_taup, time_1d, correlation_time, dt, file=fp_out)
    ##
    fp_out.close()
    fid.close()



    

# There are inputs:

# 1. `.grd.txt` file generated by `fw_generate_mod3d.x` for 3D model.
#    We need the grid point index, and velocity perturbations from that file.
#
# 2. `sens.h5` the cross-term sensitivities generated by `fw_crossterm_sensitivity.x`.
#
#
# 3. (optional) `ev-sta.txt` the input file used by `raypath.py`.
#    We need the index to know which two body waves are cross-correlated.

if __name__ == "__main__":
    if len(sys.argv) < 4:
        print('%s  mod.grd.txt  cc_sens.h5  out_fnm.txt' % (sys.argv[0]) )
        sys.exit(0)
    model_grd_fnm = sys.argv[1] #'01_workspace/plume.grd.txt'
    cc_sens_fnm   = sys.argv[2] #'06_workspace/cc_sens.h5'
    #ev_sta_fnm = '03_workspace/ev-sta.txt'
    out_fnm       = sys.argv[3] #'07_workspace/cc_time.txt'
    ####
    run_cc_sens(model_grd_fnm, cc_sens_fnm, out_fnm)
    ####
